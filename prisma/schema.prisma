// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

enum AcademicQuarter {
  PRELIMS
  MIDTERMS
  FINALS
}

enum Semester {
  FIRST
  SECOND
}

model User {
  id           String         @id @default(cuid())
  schoolId     String         @unique
  email        String         @unique
  password     String
  firstName    String
  lastName     String
  role         UserRole       @default(ADMIN)
  student      Student?
  faculty      Faculty?
  announcement Announcement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([firstName, lastName])
  @@index([lastName])
  @@map("users")
}

model Student {
  id               String            @id @default(cuid())
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String            @unique
  course           Course?           @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId         String?
  yearLevel        Int
  section          String
  enrolledSubjects EnrolledSubject[]

  @@map("students")
}

model Faculty {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String    @unique
  department String
  position   String
  subjects   Subject[]

  @@map("faculties")
}

model Course {
  id          String          @id @default(cuid())
  code        String          @unique
  title       String
  description String
  students    Student[]
  subjects    CourseSubject[]

  @@unique([code, title])
  @@map("courses")
}

model Subject {
  id              String            @id @default(cuid())
  code            String            @unique
  title           String            @unique
  description     String
  courses         CourseSubject[]
  faculty         Faculty?          @relation(fields: [facultyId], references: [id], onDelete: SetNull)
  facultyId       String?
  enrolledSubject EnrolledSubject[]

  @@map("subject")
}

model CourseSubject {
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String

  @@id([courseId, subjectId])
  @@map("course_subjects")
}

model EnrolledSubject {
  id        String  @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  grades    Grade[]
}

model Grade {
  id                String           @id @default(cuid())
  enrolledSubjectId String
  enrolledSubject   EnrolledSubject? @relation(fields: [enrolledSubjectId], references: [id], onDelete: Cascade)
  semester          Semester
  // quarter           AcademicQuarter
  grade             Float
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@unique([semester, enrolledSubjectId])
  @@map("grades")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("announcements")
}
