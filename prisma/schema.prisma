// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch", "omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  FACULTY
  ADMIN
}

model User {
  id           String         @id @default(cuid())
  schoolId     String
  email        String         @unique
  password     String
  firstName    String
  lastName     String
  role         UserRole       @default(ADMIN)
  student      Student?
  faculty      Faculty?
  announcement Announcement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([firstName, lastName])
  @@index([lastName])
  @@map("users")
}

model Student {
  id         String       @id @default(cuid())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String       @unique
  course     Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId   String
  yearLevel  Int
  section    String
  reportCard ReportCard[]

  @@map("students")
}

model Faculty {
  id         String @id @default(cuid())
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String @unique
  department String
  position   String

  @@map("faculties")
}

model Course {
  id          String    @id @default(cuid())
  code        String
  title       String
  description String
  students    Student[]

  @@map("courses")
}

model ReportCard {
  id           String  @id @default(cuid())
  student      Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String
  grades       Grade[]
  academicYear String
  semester     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("report_cards")
}

model Grade {
  id           String     @id @default(cuid())
  reportCard   ReportCard @relation(fields: [reportCardId], references: [id], onDelete: Cascade)
  reportCardId String
  subject      String
  grade        Float

  @@map("grades")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("announcements")
}
